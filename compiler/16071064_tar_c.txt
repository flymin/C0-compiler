.data
S_0: .asciiz " x = "
S_1: .asciiz " y = "
S_2: .asciiz " SWAP x = "
S_3: .asciiz " SWAP y = "
S_4: .asciiz " OVERFLOW!          "
S_5: .asciiz " complete number: "
S_6: .asciiz "  "
S_7: .asciiz "          "
S_8: .asciiz " ---------------------------------------------------------------          "
S_9: .asciiz " b = "
S_10: .asciiz " "
S_11: .asciiz "          The total is "
S_12: .asciiz " 10! = "
.text
   # @call main
add $fp, $sp, $0
sw $ra, 0($sp)
sw $fp, -4($sp)
addi $sp, $sp, -20
jal main_E
li $v0, 10
syscall
   # @exit
   # @func factorial
factorial_E:
   # @para INT n
   # #0 = n LE 1
lw $t0, -12($fp)
li $t1, 1
sle $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 factorial_L_0_else_begin
lw $t0, -16($fp)
beq $t0, $0, factorial_L_0_else_begin
nop
   # @ret 1
li $v0, 1
jr $ra
nop
   # factorial_L_0_else_begin :
factorial_L_0_else_begin:
   # #0 = n SUB 1
lw $t0, -12($fp)
addi $t0, $t0, -1
sw $t0, -16($fp)
   # @push #0
   # @call factorial
lw $t0, -16($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -32
jal factorial_E
addi $sp, $sp, 32
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -20($fp)
   # #1 = n MUL #1
lw $t0, -12($fp)
lw $t1, -20($fp)
mul $t0, $t0, $t1
sw $t0, -20($fp)
   # @ret #1
lw $v0, -20($fp)
jr $ra
nop
   # factorial_L_0_else_over :
factorial_L_0_else_over:
   # @func mod
mod_E:
   # @para INT x
   # @para INT y
   # #0 = x DIV y
lw $t0, -12($fp)
lw $t1, -16($fp)
div $t0, $t0, $t1
sw $t0, -20($fp)
   # #0 = #0 MUL y
lw $t0, -20($fp)
lw $t1, -16($fp)
mul $t0, $t0, $t1
sw $t0, -20($fp)
   # x = x SUB #0
lw $t0, -12($fp)
lw $t1, -20($fp)
sub $t0, $t0, $t1
sw $t0, -12($fp)
   # @ret x
lw $v0, -12($fp)
jr $ra
nop
   # @func swap
swap_E:
   # @para INT x
   # @para INT y
   # @var INT temp
   # @printf STRING S_0
li $v0, 4
la $a0, S_0
syscall
   # @printf INT x
li $v0, 1
lw $a0, -12($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_1
li $v0, 4
la $a0, S_1
syscall
   # @printf INT y
li $v0, 1
lw $a0, -16($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_2
li $v0, 4
la $a0, S_2
syscall
   # @printf INT y
li $v0, 1
lw $a0, -16($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_3
li $v0, 4
la $a0, S_3
syscall
   # @printf INT x
li $v0, 1
lw $a0, -12($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @ret
jr $ra
nop
   # @func complete_num
complete_num_E:
   # @para INT val
   # @array INT k 128
   # @var INT i
   # @var INT j
   # @var INT n
   # @var INT s
   # @var INT x1
   # @var INT m
   # @var INT k2
   # @var INT h
   # @var INT leap
   # @var INT x2
   # @var INT a
   # @var INT b
   # @var INT c
   # j = val
lw $t0, -12($fp)
sw $t0, -532($fp)
   # complete_num_L_0_dobegin :
complete_num_L_0_dobegin:
   # n = -1
li $t0, -1
sw $t0, -536($fp)
   # s = j
lw $t0, -532($fp)
sw $t0, -540($fp)
   # i = 1
li $t0, 1
sw $t0, -528($fp)
   # complete_num_L_1_dobegin :
complete_num_L_1_dobegin:
   # #0 = j DIV i
lw $t0, -532($fp)
lw $t1, -528($fp)
div $t0, $t0, $t1
sw $t0, -580($fp)
   # x1 = #0 MUL i
lw $t0, -580($fp)
lw $t1, -528($fp)
mul $t0, $t0, $t1
sw $t0, -544($fp)
   # @push j
   # @push i
   # @call mod
lw $t0, -528($fp)
sw $t0, -16($sp)
lw $t0, -532($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -28
jal mod_E
addi $sp, $sp, 28
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -580($fp)
   # #0 = #0 EQ 0
lw $t0, -580($fp)
li $t1, 0
seq $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_2_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_2_else_begin
nop
   # n = n ADD 1
lw $t0, -536($fp)
addi $t0, $t0, 1
sw $t0, -536($fp)
   # s = s SUB i
lw $t0, -540($fp)
lw $t1, -528($fp)
sub $t0, $t0, $t1
sw $t0, -540($fp)
   # #0 = n GE 128
lw $t0, -536($fp)
li $t1, 128
sge $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_3_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_3_else_begin
nop
   # @printf STRING S_4
li $v0, 4
la $a0, S_4
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j complete_num_L_3_else_over
j complete_num_L_3_else_over
nop
   # complete_num_L_3_else_begin :
complete_num_L_3_else_begin:
   # k ARRSET n i
lw $t0, -528($fp)
lw $t1, -536($fp)
sll $t1, $t1, 2
sub $t1, $fp, $t1
addi $t1, $t1, -16
sw $t0, 0($t1)
   # complete_num_L_3_else_over :
complete_num_L_3_else_over:
   # @j complete_num_L_2_else_over
j complete_num_L_2_else_over
nop
   # complete_num_L_2_else_begin :
complete_num_L_2_else_begin:
   # complete_num_L_2_else_over :
complete_num_L_2_else_over:
   # i = i ADD 1
lw $t0, -528($fp)
addi $t0, $t0, 1
sw $t0, -528($fp)
   # #0 = i LT j
lw $t0, -528($fp)
lw $t1, -532($fp)
slt $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_1_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_1_doend
nop
   # @j complete_num_L_1_dobegin
j complete_num_L_1_dobegin
nop
   # complete_num_L_1_doend :
complete_num_L_1_doend:
   # #0 = s EQ 0
lw $t0, -540($fp)
li $t1, 0
seq $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_4_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_4_else_begin
nop
   # @printf STRING S_5
li $v0, 4
la $a0, S_5
syscall
   # @printf INT j
li $v0, 1
lw $a0, -532($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # i = 0
li $t0, 0
sw $t0, -528($fp)
   # complete_num_L_5_dobegin :
complete_num_L_5_dobegin:
   # @printf STRING S_6
li $v0, 4
la $a0, S_6
syscall
   # #0 = k ARRGET i
lw $t1, -528($fp)
sll $t1, $t1, 2
sub $t1, $fp, $t1
addi $t1, $t1, -16
lw $t0, 0($t1)
sw $t0, -580($fp)
   # @printf INT #0
li $v0, 1
lw $a0, -580($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # i = i ADD 1
lw $t0, -528($fp)
addi $t0, $t0, 1
sw $t0, -528($fp)
   # #0 = i LE n
lw $t0, -528($fp)
lw $t1, -536($fp)
sle $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_5_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_5_doend
nop
   # @j complete_num_L_5_dobegin
j complete_num_L_5_dobegin
nop
   # complete_num_L_5_doend :
complete_num_L_5_doend:
   # @printf STRING S_7
li $v0, 4
la $a0, S_7
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j complete_num_L_4_else_over
j complete_num_L_4_else_over
nop
   # complete_num_L_4_else_begin :
complete_num_L_4_else_begin:
   # complete_num_L_4_else_over :
complete_num_L_4_else_over:
   # j = j ADD 1
lw $t0, -532($fp)
addi $t0, $t0, 1
sw $t0, -532($fp)
   # #0 = j LT 1024
lw $t0, -532($fp)
li $t1, 1024
slt $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_0_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_0_doend
nop
   # @j complete_num_L_0_dobegin
j complete_num_L_0_dobegin
nop
   # complete_num_L_0_doend :
complete_num_L_0_doend:
   # @printf STRING S_8
li $v0, 4
la $a0, S_8
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # a = 0
li $t0, 0
sw $t0, -568($fp)
   # i = 0
li $t0, 0
sw $t0, -528($fp)
   # complete_num_L_6_dobegin :
complete_num_L_6_dobegin:
   # b = a MUL i
lw $t0, -568($fp)
lw $t1, -528($fp)
mul $t0, $t0, $t1
sw $t0, -572($fp)
   # c = j MUL n
lw $t0, -532($fp)
lw $t1, -536($fp)
mul $t0, $t0, $t1
sw $t0, -576($fp)
   # a = a MUL i
lw $t0, -568($fp)
lw $t1, -528($fp)
mul $t0, $t0, $t1
sw $t0, -568($fp)
   # #0 = a ADD b
lw $t0, -568($fp)
lw $t1, -572($fp)
add $t0, $t0, $t1
sw $t0, -580($fp)
   # a = #0 ADD c
lw $t0, -580($fp)
lw $t1, -576($fp)
add $t0, $t0, $t1
sw $t0, -568($fp)
   # i = i ADD 1
lw $t0, -528($fp)
addi $t0, $t0, 1
sw $t0, -528($fp)
   # #0 = i LT 1024
lw $t0, -528($fp)
li $t1, 1024
slt $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_6_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_6_doend
nop
   # @j complete_num_L_6_dobegin
j complete_num_L_6_dobegin
nop
   # complete_num_L_6_doend :
complete_num_L_6_doend:
   # b = a
lw $t0, -568($fp)
sw $t0, -572($fp)
   # i = 0
li $t0, 0
sw $t0, -528($fp)
   # complete_num_L_7_dobegin :
complete_num_L_7_dobegin:
   # b = b ADD i
lw $t0, -572($fp)
lw $t1, -528($fp)
add $t0, $t0, $t1
sw $t0, -572($fp)
   # i = i ADD 1
lw $t0, -528($fp)
addi $t0, $t0, 1
sw $t0, -528($fp)
   # #0 = i LT 1024
lw $t0, -528($fp)
li $t1, 1024
slt $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_7_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_7_doend
nop
   # @j complete_num_L_7_dobegin
j complete_num_L_7_dobegin
nop
   # complete_num_L_7_doend :
complete_num_L_7_doend:
   # @printf STRING S_9
li $v0, 4
la $a0, S_9
syscall
   # @printf INT b
li $v0, 1
lw $a0, -572($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_8
li $v0, 4
la $a0, S_8
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # h = 0
li $t0, 0
sw $t0, -556($fp)
   # leap = 1
li $t0, 1
sw $t0, -560($fp)
   # m = 2
li $t0, 2
sw $t0, -548($fp)
   # complete_num_L_8_dobegin :
complete_num_L_8_dobegin:
   # k2 = m DIV 2
lw $t0, -548($fp)
div $t0, $t0, 2
sw $t0, -552($fp)
   # i = 2
li $t0, 2
sw $t0, -528($fp)
   # complete_num_L_9_dobegin :
complete_num_L_9_dobegin:
   # #0 = m DIV i
lw $t0, -548($fp)
lw $t1, -528($fp)
div $t0, $t0, $t1
sw $t0, -580($fp)
   # x2 = #0 MUL i
lw $t0, -580($fp)
lw $t1, -528($fp)
mul $t0, $t0, $t1
sw $t0, -564($fp)
   # @push m
   # @push i
   # @call mod
lw $t0, -528($fp)
sw $t0, -16($sp)
lw $t0, -548($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -28
jal mod_E
addi $sp, $sp, 28
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -580($fp)
   # #0 = #0 EQ 0
lw $t0, -580($fp)
li $t1, 0
seq $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_10_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_10_else_begin
nop
   # leap = 0
li $t0, 0
sw $t0, -560($fp)
   # @j complete_num_L_10_else_over
j complete_num_L_10_else_over
nop
   # complete_num_L_10_else_begin :
complete_num_L_10_else_begin:
   # complete_num_L_10_else_over :
complete_num_L_10_else_over:
   # i = i ADD 1
lw $t0, -528($fp)
addi $t0, $t0, 1
sw $t0, -528($fp)
   # #0 = i LE k2
lw $t0, -528($fp)
lw $t1, -552($fp)
sle $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_9_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_9_doend
nop
   # @j complete_num_L_9_dobegin
j complete_num_L_9_dobegin
nop
   # complete_num_L_9_doend :
complete_num_L_9_doend:
   # #0 = leap EQ 1
lw $t0, -560($fp)
li $t1, 1
seq $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_11_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_11_else_begin
nop
   # @printf STRING S_10
li $v0, 4
la $a0, S_10
syscall
   # @printf INT m
li $v0, 1
lw $a0, -548($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # h = h ADD 1
lw $t0, -556($fp)
addi $t0, $t0, 1
sw $t0, -556($fp)
   # #0 = h DIV 10
lw $t0, -556($fp)
div $t0, $t0, 10
sw $t0, -580($fp)
   # x2 = #0 MUL 10
lw $t0, -580($fp)
mul $t0, $t0, 10
sw $t0, -564($fp)
   # #0 = x2 EQ h
lw $t0, -564($fp)
lw $t1, -556($fp)
seq $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_12_else_begin
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_12_else_begin
nop
   # @printf STRING S_7
li $v0, 4
la $a0, S_7
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j complete_num_L_12_else_over
j complete_num_L_12_else_over
nop
   # complete_num_L_12_else_begin :
complete_num_L_12_else_begin:
   # complete_num_L_12_else_over :
complete_num_L_12_else_over:
   # @j complete_num_L_11_else_over
j complete_num_L_11_else_over
nop
   # complete_num_L_11_else_begin :
complete_num_L_11_else_begin:
   # complete_num_L_11_else_over :
complete_num_L_11_else_over:
   # leap = 1
li $t0, 1
sw $t0, -560($fp)
   # m = m ADD 1
lw $t0, -548($fp)
addi $t0, $t0, 1
sw $t0, -548($fp)
   # #0 = m LE 1024
lw $t0, -548($fp)
li $t1, 1024
sle $t0, $t0, $t1
sw $t0, -580($fp)
   # @bz #0 complete_num_L_8_doend
lw $t0, -580($fp)
beq $t0, $0, complete_num_L_8_doend
nop
   # @j complete_num_L_8_dobegin
j complete_num_L_8_dobegin
nop
   # complete_num_L_8_doend :
complete_num_L_8_doend:
   # @printf STRING S_11
li $v0, 4
la $a0, S_11
syscall
   # @printf INT h
li $v0, 1
lw $a0, -556($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @ret
jr $ra
nop
   # @func main
main_E:
   # @var INT n
   # @push 10
   # @call factorial
li $t0, 10
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -32
jal factorial_E
addi $sp, $sp, 32
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -16($fp)
   # @printf STRING S_12
li $v0, 4
la $a0, S_12
syscall
   # @printf INT #0
li $v0, 1
lw $a0, -16($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @push 5
   # @push 10
   # @call swap
li $t0, 10
sw $t0, -16($sp)
li $t0, 5
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -24
jal swap_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @push 2
   # @call complete_num
li $t0, 2
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -592
jal complete_num_E
addi $sp, $sp, 592
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @ret
jr $ra
nop
