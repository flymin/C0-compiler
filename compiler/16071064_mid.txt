@call main
@exit
@func factorial
@para INT n
#0 = n LE 1
@bz #0 factorial_L_0_else_begin
@ret 1
@j factorial_L_0_else_over
factorial_L_0_else_begin :
#1 = n SUB 1
@push #1
@call factorial
@get #2
#3 = n MUL #2
@ret #3
factorial_L_0_else_over :
@func mod
@para INT x
@para INT y
#0 = x DIV y
#0 = #0 MUL y
#1 = x SUB #0
x = #1
@ret x
@func swap
@para INT x
@para INT y
@var INT temp
@printf STRING S_0
@printf INT x
@printf LINE
@printf STRING S_1
@printf INT y
@printf LINE
temp = x
x = y
y = temp
@printf STRING S_2
@printf INT x
@printf LINE
@printf STRING S_3
@printf INT y
@printf LINE
@ret 
@func complete_num
@para INT val
@array INT k 128
@var INT i
@var INT j
@var INT n
@var INT s
@var INT x1
@var INT m
@var INT k2
@var INT h
@var INT leap
@var INT x2
@var INT a
@var INT b
@var INT c
j = val
complete_num_L_0_dobegin :
n = -1
s = j
i = 1
complete_num_L_1_dobegin :
#0 = j DIV i
#1 = #0 MUL i
x1 = #1
@push j
@push i
@call mod
@get #0
#1 = #0 EQ 0
@bz #1 complete_num_L_2_else_begin
#2 = n ADD 1
n = #2
#2 = s SUB i
s = #2
#2 = n GE 128
@bz #2 complete_num_L_3_else_begin
@printf STRING S_4
@printf LINE
@j complete_num_L_3_else_over
complete_num_L_3_else_begin :
k ARRSET n i
complete_num_L_3_else_over :
@j complete_num_L_2_else_over
complete_num_L_2_else_begin :
complete_num_L_2_else_over :
#0 = i ADD 1
i = #0
#0 = i LT j
@bz #0 complete_num_L_1_doend
@j complete_num_L_1_dobegin
complete_num_L_1_doend :
#0 = s EQ 0
@bz #0 complete_num_L_4_else_begin
@printf STRING S_5
@printf INT j
@printf LINE
i = 0
complete_num_L_5_dobegin :
@printf STRING S_6
#1 = k ARRGET i
@printf INT #1
@printf LINE
#1 = i ADD 1
i = #1
#1 = i LE n
@bz #1 complete_num_L_5_doend
@j complete_num_L_5_dobegin
complete_num_L_5_doend :
@printf STRING S_7
@printf LINE
@j complete_num_L_4_else_over
complete_num_L_4_else_begin :
complete_num_L_4_else_over :
#0 = j ADD 1
j = #0
#0 = j LT 1024
@bz #0 complete_num_L_0_doend
@j complete_num_L_0_dobegin
complete_num_L_0_doend :
@printf STRING S_8
@printf LINE
a = 0
i = 0
complete_num_L_6_dobegin :
#0 = a MUL i
b = #0
#0 = j MUL n
c = #0
#0 = a MUL i
a = #0
#0 = a ADD b
#0 = #0 ADD c
a = #0
#0 = i ADD 1
i = #0
#0 = i LT 1024
@bz #0 complete_num_L_6_doend
@j complete_num_L_6_dobegin
complete_num_L_6_doend :
b = a
i = 0
complete_num_L_7_dobegin :
#0 = b ADD i
b = #0
#0 = i ADD 1
i = #0
#0 = i LT 1024
@bz #0 complete_num_L_7_doend
@j complete_num_L_7_dobegin
complete_num_L_7_doend :
@printf STRING S_9
@printf INT b
@printf LINE
@printf STRING S_8
@printf LINE
h = 0
leap = 1
m = 2
complete_num_L_8_dobegin :
#0 = m DIV 2
k2 = #0
i = 2
complete_num_L_9_dobegin :
#0 = m DIV i
#1 = #0 MUL i
x2 = #1
@push m
@push i
@call mod
@get #0
#1 = #0 EQ 0
@bz #1 complete_num_L_10_else_begin
leap = 0
@j complete_num_L_10_else_over
complete_num_L_10_else_begin :
complete_num_L_10_else_over :
#0 = i ADD 1
i = #0
#0 = i LE k2
@bz #0 complete_num_L_9_doend
@j complete_num_L_9_dobegin
complete_num_L_9_doend :
#0 = leap EQ 1
@bz #0 complete_num_L_11_else_begin
@printf STRING S_10
@printf INT m
@printf LINE
#1 = h ADD 1
h = #1
#1 = h DIV 10
#2 = #1 MUL 10
x2 = #2
#1 = x2 EQ h
@bz #1 complete_num_L_12_else_begin
@printf STRING S_7
@printf LINE
@j complete_num_L_12_else_over
complete_num_L_12_else_begin :
complete_num_L_12_else_over :
@j complete_num_L_11_else_over
complete_num_L_11_else_begin :
complete_num_L_11_else_over :
leap = 1
#0 = m ADD 1
m = #0
#0 = m LE 1024
@bz #0 complete_num_L_8_doend
@j complete_num_L_8_dobegin
complete_num_L_8_doend :
@printf STRING S_11
@printf INT h
@printf LINE
@ret 
@func main
@var INT n
@push 10
@call factorial
@get #0
n = #0
@printf STRING S_12
@printf INT n
@printf LINE
@push 5
@push 10
@call swap
@push 2
@call complete_num
@ret 
