.data
S_0: .asciiz "error10"
S_1: .asciiz "error11"
S_2: .asciiz " T is "
S_3: .asciiz " underline is "
S_4: .asciiz " One error "
S_5: .asciiz " one error "
S_6: .asciiz "'s ascii is "
S_7: .asciiz " again, is "
S_8: .asciiz " error1 "
S_9: .asciiz " error2 "
S_10: .asciiz " sum is "
S_11: .asciiz " error3 "
S_12: .asciiz " error4 "
S_13: .asciiz " error5 "
S_14: .asciiz " error6 "
S_15: .asciiz " error7 "
S_16: .asciiz "error12"
S_17: .asciiz "error13"
S_18: .asciiz " error8 "
S_19: .asciiz " empty string"
S_20: .asciiz ""
S_21: .asciiz "Yeah"
S_22: .asciiz "!0#1$2%3&4'5(6)7*8+9,a-b.c/d~e:f;g<h=i>j?k@lm[n\\o]p^q_r`st{y|u}v"
S_23: .asciiz "wxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ "
S_24: .asciiz "yes"
.text
   # @array CHAR True 4
   # @array CHAR False 5
   # @var CHAR char_flag
   # @var INT int_flag
   # @var INT X
   # @array INT list 101
   # @var INT n
   # @call main
add $fp, $sp, $0
sw $ra, 0($sp)
sw $fp, -4($sp)
addi $sp, $sp, -88
jal main_E
li $v0, 10
syscall
   # @exit
   # @func quicksort
quicksort_E:
   # @para INT left
   # @para INT right
   # @var INT i
   # @var INT j
   # @var INT t
   # @var INT temp
   # @var INT _temp
   # @var INT _con
   # #0 = left GT right
sgt $t0, $a0, $a1
   # @free #0
   # @bz #0 quicksort_L_0_else_begin
beq $t0, $0, quicksort_L_0_else_begin
   # @ret
jr $ra
nop
   # quicksort_L_0_else_begin :
quicksort_L_0_else_begin:
   # temp = list ARRGET left
sll $v0, $a0, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $s0, 0($v0)
   # i = left
move $s1, $a0
   # #0 = left NEQ right
sne $t0, $a0, $a1
   # j = right
move $s2, $a1
   # @free #0
   # @bz #0 quicksort_L_1_else_begin
beq $t0, $0, quicksort_L_1_else_begin
   # quicksort_L_2_dobegin :
quicksort_L_2_dobegin:
   # #0 = list ARRGET j
sll $v0, $s2, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # #0 = #0 GE temp
sge $t0, $t0, $s0
   # _con = 0
li $s3, 0
   # @free #0
   # @bz #0 quicksort_L_3_else_begin
beq $t0, $0, quicksort_L_3_else_begin
   # #0 = i LT j
slt $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_4_else_begin
beq $t0, $0, quicksort_L_4_else_begin
   # _con = 1
li $s3, 1
   # quicksort_L_4_else_begin :
quicksort_L_4_else_begin:
   # quicksort_L_3_else_begin :
quicksort_L_3_else_begin:
   # _temp = 0
li $s4, 0
   # @bz _con quicksort_L_5_for_end
beq $s3, $0, quicksort_L_5_for_end
   # quicksort_L_5_for_cond :
quicksort_L_5_for_cond:
   # @bz _con quicksort_L_5_for_end
beq $s3, $0, quicksort_L_5_for_end
   # @j quicksort_L_5_for_state
j quicksort_L_5_for_state
nop
   # quicksort_L_5_for_step :
quicksort_L_5_for_step:
   # _temp = _temp ADD 1
addi $s4, $s4, 1
   # @j quicksort_L_5_for_cond
j quicksort_L_5_for_cond
nop
   # quicksort_L_5_for_state :
quicksort_L_5_for_state:
   # j = j SUB 1
addi $s2, $s2, -1
   # #0 = list ARRGET j
sll $v0, $s2, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # #0 = #0 GE temp
sge $t0, $t0, $s0
   # _con = 0
li $s3, 0
   # @free #0
   # @bz #0 quicksort_L_6_else_begin
beq $t0, $0, quicksort_L_6_else_begin
   # #0 = i LT j
slt $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_7_else_begin
beq $t0, $0, quicksort_L_7_else_begin
   # _con = 1
li $s3, 1
   # quicksort_L_7_else_begin :
quicksort_L_7_else_begin:
   # quicksort_L_6_else_begin :
quicksort_L_6_else_begin:
   # @j quicksort_L_5_for_step
j quicksort_L_5_for_step
nop
   # quicksort_L_5_for_end :
quicksort_L_5_for_end:
   # #0 = list ARRGET i
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # #0 = #0 LE temp
sle $t0, $t0, $s0
   # _con = 0
li $s3, 0
   # @free #0
   # @bz #0 quicksort_L_8_else_begin
beq $t0, $0, quicksort_L_8_else_begin
   # #0 = i LT j
slt $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_9_else_begin
beq $t0, $0, quicksort_L_9_else_begin
   # _con = 1
li $s3, 1
   # quicksort_L_9_else_begin :
quicksort_L_9_else_begin:
   # quicksort_L_8_else_begin :
quicksort_L_8_else_begin:
   # _temp = 0
li $s4, 0
   # @bz _con quicksort_L_10_for_end
beq $s3, $0, quicksort_L_10_for_end
   # quicksort_L_10_for_cond :
quicksort_L_10_for_cond:
   # @bz _con quicksort_L_10_for_end
beq $s3, $0, quicksort_L_10_for_end
   # @j quicksort_L_10_for_state
j quicksort_L_10_for_state
nop
   # quicksort_L_10_for_step :
quicksort_L_10_for_step:
   # _temp = _temp ADD 1
addi $s4, $s4, 1
   # @j quicksort_L_10_for_cond
j quicksort_L_10_for_cond
nop
   # quicksort_L_10_for_state :
quicksort_L_10_for_state:
   # i = i ADD 1
addi $s1, $s1, 1
   # #0 = list ARRGET i
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # #0 = #0 LE temp
sle $t0, $t0, $s0
   # _con = 0
li $s3, 0
   # @free #0
   # @bz #0 quicksort_L_11_else_begin
beq $t0, $0, quicksort_L_11_else_begin
   # #0 = i LT j
slt $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_12_else_begin
beq $t0, $0, quicksort_L_12_else_begin
   # _con = 1
li $s3, 1
   # quicksort_L_12_else_begin :
quicksort_L_12_else_begin:
   # quicksort_L_11_else_begin :
quicksort_L_11_else_begin:
   # @j quicksort_L_10_for_step
j quicksort_L_10_for_step
nop
   # quicksort_L_10_for_end :
quicksort_L_10_for_end:
   # #0 = i LT j
slt $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_13_else_begin
beq $t0, $0, quicksort_L_13_else_begin
   # t = list ARRGET i
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $s5, 0($v0)
   # #0 = list ARRGET j
sll $v0, $s2, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # @free #0
   # list ARRSET i #0
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
sw $t0, 0($v0)
   # list ARRSET j t
sll $v0, $s2, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
sw $s5, 0($v0)
   # quicksort_L_13_else_begin :
quicksort_L_13_else_begin:
   # #0 = i NEQ j
sne $t0, $s1, $s2
   # @free #0
   # @bz #0 quicksort_L_2_doend
beq $t0, $0, quicksort_L_2_doend
   # @j quicksort_L_2_dobegin
j quicksort_L_2_dobegin
nop
   # quicksort_L_2_doend :
quicksort_L_2_doend:
   # quicksort_L_1_else_begin :
quicksort_L_1_else_begin:
   # #0 = list ARRGET i
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # @free #0
   # list ARRSET left #0
sll $v0, $a0, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
sw $t0, 0($v0)
   # list ARRSET i temp
sll $v0, $s1, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
sw $s0, 0($v0)
   # @push left
   # #0 = i SUB 1
addi $t0, $s1, -1
   # @push #0
   # @call quicksort
sw $a0, -12($fp) # store left
sw $a1, -16($fp) # store right
sw $s0, -32($fp) # store temp
sw $s1, -20($fp) # store i
sw $s2, -24($fp) # store j
sw $s3, -40($fp) # store _con
sw $s4, -36($fp) # store _temp
sw $s5, -28($fp) # store t
sw $t0, -44($fp) # store #0
move $a1, $t0
move $a0, $a0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # #1 = i ADD 1
lw $s0, -20($fp) # load i
addi $t1, $s0, 1
   # @push #1
   # @push right
   # @call quicksort
sw $t1, -48($fp) # store #1
lw $s1, -16($fp) # load right
move $a1, $s1
move $a0, $t1
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @ret
jr $ra
nop
   # @func F
F_E:
   # @para INT no
   # #0 = no EQ 0
seq $t0, $a0, $0
   # @free #0
   # @bz #0 F_L_0_else_begin
beq $t0, $0, F_L_0_else_begin
   # @ret 1
li $v0, 1
jr $ra
nop
   # F_L_0_else_begin :
F_L_0_else_begin:
   # #0 = no EQ 1
li $s0, 1
seq $t0, $a0, $s0
   # @free #0
   # @bz #0 F_L_1_else_begin
beq $t0, $0, F_L_1_else_begin
   # @ret 1
li $v0, 1
jr $ra
nop
   # F_L_1_else_begin :
F_L_1_else_begin:
   # #0 = no SUB 1
addi $t0, $a0, -1
   # @push #0
   # @call F
sw $a0, -12($fp) # store no
sw $t0, -16($fp) # store #0
move $a0, $t0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
move $t1, $v0
   # #2 = no SUB 2
lw $s0, -12($fp) # load no
addi $t2, $s0, -2
   # @push #2
   # @call F
sw $t1, -20($fp) # store #1
sw $t2, -24($fp) # store #2
move $a0, $t2
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #3
move $t3, $v0
   # @free #3
   # #1 = #1 ADD #3
lw $t1, -20($fp) # load #1
add $t1, $t1, $t3
   # @free #1
   # @ret #1
move $v0, $t1
jr $ra
nop
   # @func bg
bg_E:
   # @para INT a
   # @para INT b
   # @var INT temp
   # @var INT i
   # #0 = a GT b
sgt $t0, $a0, $a1
   # @free #0
   # @bz #0 bg_L_0_else_begin
beq $t0, $0, bg_L_0_else_begin
   # temp = 3
li $s0, 3
   # @j bg_L_0_else_over
j bg_L_0_else_over
nop
   # bg_L_0_else_begin :
bg_L_0_else_begin:
   # temp = 4
li $s0, 4
   # bg_L_0_else_over :
bg_L_0_else_over:
   # #0 = temp GE 3
li $s1, 3
sge $t0, $s0, $s1
   # @free #0
   # @bz #0 bg_L_1_else_begin
beq $t0, $0, bg_L_1_else_begin
   # #0 = temp NEQ 4
li $s2, 4
sne $t0, $s0, $s2
   # @free #0
   # @bz #0 bg_L_2_else_begin
beq $t0, $0, bg_L_2_else_begin
   # #0 = True ARRGET temp
sll $v0, $s0, 2
sub $v0, $gp, $v0
addi $v0, $v0, -0
lw $t0, 0($v0)
   # #0 = #0 NEQ 47
li $s3, 47
sne $t0, $t0, $s3
   # @free #0
   # @bz #0 bg_L_3_else_begin
beq $t0, $0, bg_L_3_else_begin
   # @printf STRING S_0
li $v0, 4
la $a0, S_0
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j bg_L_3_else_over
j bg_L_3_else_over
nop
   # bg_L_3_else_begin :
bg_L_3_else_begin:
   # @ret
jr $ra
nop
   # bg_L_3_else_over :
bg_L_3_else_over:
   # @j bg_L_2_else_over
j bg_L_2_else_over
nop
   # bg_L_2_else_begin :
bg_L_2_else_begin:
   # #0 = False ARRGET temp
sll $v0, $s0, 2
sub $v0, $gp, $v0
addi $v0, $v0, -16
lw $t0, 0($v0)
   # #0 = #0 NEQ 45
li $s4, 45
sne $t0, $t0, $s4
   # @free #0
   # @bz #0 bg_L_4_else_begin
beq $t0, $0, bg_L_4_else_begin
   # @printf STRING S_1
li $v0, 4
la $a0, S_1
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # bg_L_4_else_begin :
bg_L_4_else_begin:
   # bg_L_2_else_over :
bg_L_2_else_over:
   # bg_L_1_else_begin :
bg_L_1_else_begin:
   # True ARRSET 2 84
li $s5, 84
sw $s5, -8($gp)
   # @ret
jr $ra
nop
   # @func _printf
_printf_E:
   # @printf STRING S_2
li $v0, 4
la $a0, S_2
syscall
   # @printf CHAR 84
li $v0, 11
li $a0, 84
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_3
li $v0, 4
la $a0, S_3
syscall
   # @printf CHAR 95
li $v0, 11
li $a0, 95
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # _printf_L_0_else_begin :
_printf_L_0_else_begin:
   # _printf_L_1_else_begin :
_printf_L_1_else_begin:
   # @ret
jr $ra
nop
   # @func _scanf
_scanf_E:
   # @var CHAR temp
   # @scanf CHAR temp
li $v0, 12
syscall
move $s0, $v0
   # @ret temp
move $v0, $s0
jr $ra
nop
   # @func int2char
int2char_E:
   # @para INT no
   # #0 = no EQ 43
li $s0, 43
seq $t0, $a0, $s0
   # @free #0
   # @bz #0 int2char_L_0_else_begin
beq $t0, $0, int2char_L_0_else_begin
   # @ret 43
li $v0, 43
jr $ra
nop
   # int2char_L_0_else_begin :
int2char_L_0_else_begin:
   # #0 = no EQ 45
li $s1, 45
seq $t0, $a0, $s1
   # @free #0
   # @bz #0 int2char_L_1_else_begin
beq $t0, $0, int2char_L_1_else_begin
   # @ret 45
li $v0, 45
jr $ra
nop
   # int2char_L_1_else_begin :
int2char_L_1_else_begin:
   # #0 = no EQ 42
li $s2, 42
seq $t0, $a0, $s2
   # @free #0
   # @bz #0 int2char_L_2_else_begin
beq $t0, $0, int2char_L_2_else_begin
   # @ret 42
li $v0, 42
jr $ra
nop
   # int2char_L_2_else_begin :
int2char_L_2_else_begin:
   # #0 = no EQ 47
li $s3, 47
seq $t0, $a0, $s3
   # @free #0
   # @bz #0 int2char_L_3_else_begin
beq $t0, $0, int2char_L_3_else_begin
   # @ret 47
li $v0, 47
jr $ra
nop
   # int2char_L_3_else_begin :
int2char_L_3_else_begin:
   # #0 = no LE 57
li $s4, 57
sle $t0, $a0, $s4
   # @free #0
   # @bz #0 int2char_L_4_else_begin
beq $t0, $0, int2char_L_4_else_begin
   # #0 = no GE 48
li $s5, 48
sge $t0, $a0, $s5
   # @free #0
   # @bz #0 int2char_L_5_else_begin
beq $t0, $0, int2char_L_5_else_begin
   # @ret 49
li $v0, 49
jr $ra
nop
   # int2char_L_5_else_begin :
int2char_L_5_else_begin:
   # int2char_L_4_else_begin :
int2char_L_4_else_begin:
   # #0 = no LE 90
li $s6, 90
sle $t0, $a0, $s6
   # @free #0
   # @bz #0 int2char_L_6_else_begin
beq $t0, $0, int2char_L_6_else_begin
   # #0 = no GE 65
li $s7, 65
sge $t0, $a0, $s7
   # @free #0
   # @bz #0 int2char_L_7_else_begin
beq $t0, $0, int2char_L_7_else_begin
   # @ret 65
li $v0, 65
jr $ra
nop
   # int2char_L_7_else_begin :
int2char_L_7_else_begin:
   # int2char_L_6_else_begin :
int2char_L_6_else_begin:
   # #0 = no LE 122
li $t1, 122
sle $t0, $a0, $t1
   # @free #0
   # @bz #0 int2char_L_8_else_begin
beq $t0, $0, int2char_L_8_else_begin
   # #0 = no GE 97
li $t2, 97
sge $t0, $a0, $t2
   # @free #0
   # @bz #0 int2char_L_9_else_begin
beq $t0, $0, int2char_L_9_else_begin
   # @ret 97
li $v0, 97
jr $ra
nop
   # int2char_L_9_else_begin :
int2char_L_9_else_begin:
   # int2char_L_8_else_begin :
int2char_L_8_else_begin:
   # @ret 48
li $v0, 48
jr $ra
nop
   # @func ascii2int
ascii2int_E:
   # @para CHAR chtemp
   # @ret chtemp
move $v0, $a0
jr $ra
nop
   # @func sum
sum_E:
   # @para INT a1
   # @para INT a2
   # @para CHAR a3
   # @para INT a4
   # @para INT a5
   # @para INT a6
   # @var INT temp
   # #0 = a1 ADD a2
add $t0, $a0, $a1
   # #0 = #0 ADD a3
add $t0, $t0, $a2
   # #0 = #0 ADD a4
add $t0, $t0, $a3
   # #0 = #0 ADD a5
lw $s0, -28($fp) # load a5
add $t0, $t0, $s0
   # @free #0
   # temp = #0 ADD a6
lw $s1, -32($fp) # load a6
add $s2, $t0, $s1
   # @ret temp
move $v0, $s2
jr $ra
nop
   # @func conFun
conFun_E:
   # @ret 10
li $v0, 10
jr $ra
nop
   # @func returnX
returnX_E:
   # X = X ADD 1
lw $s0, -44($gp) # load X
addi $s0, $s0, 1
   # @ret X
move $v0, $s0
jr $ra
nop
   # @func main
main_E:
   # @var CHAR proc
   # @var CHAR iproc
   # @var CHAR chtemp
   # @var INT a
   # @var INT b
   # @array INT array 3
   # @var INT i
   # @var INT j
   # @var INT itemp
   # True ARRSET 0 84
li $s0, 84
sw $s0, -0($gp)
   # True ARRSET 1 114
li $s1, 114
sw $s1, -4($gp)
   # True ARRSET 2 42
li $s2, 42
sw $s2, -8($gp)
   # True ARRSET 3 47
li $s3, 47
sw $s3, -12($gp)
   # False ARRSET 0 70
li $s4, 70
sw $s4, -16($gp)
   # False ARRSET 1 97
li $s5, 97
sw $s5, -20($gp)
   # False ARRSET 2 108
li $s6, 108
sw $s6, -24($gp)
   # False ARRSET 3 43
li $s7, 43
sw $s7, -28($gp)
   # False ARRSET 4 45
li $t0, 45
sw $t0, -32($gp)
   # @scanf CHAR chtemp
li $v0, 12
syscall
move $t1, $v0
   # @push chtemp
   # @call ascii2int
sw $t1, -20($fp) # store chtemp
move $a0, $t1
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # @printf STRING S_6
li $v0, 4
la $a0, S_6
syscall
   # @printf INT #0
li $v0, 1
move $a0, $t0
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @call _scanf
sw $t0, -56($fp) # store #0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal _scanf_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
move $t1, $v0
   # @printf STRING S_7
li $v0, 4
la $a0, S_7
syscall
   # @printf INT #1
li $v0, 1
move $a0, $t1
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @free #0
   # a = #0
lw $t0, -56($fp) # load #0
move $s0, $t0
   # @free #1
   # chtemp = #1
move $s1, $t1
   # main_L_0_dobegin :
main_L_0_dobegin:
   # @scanf INT itemp
li $v0, 5
syscall
move $s2, $v0
   # @push itemp
   # @call F
sw $s0, -24($fp) # store a
sw $s1, -20($fp) # store chtemp
sw $s2, -52($fp) # store itemp
move $a0, $s2
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # @free #0
   # @printf INT #0
li $v0, 1
move $a0, $t0
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_0_doend :
main_L_0_doend:
   # @push 10
   # @call F
li $s0, 10
move $a0, $s0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # #1 = #0 NEQ 89
li $s0, 89
sne $t1, $t0, $s0
   # @free #0
   # b = #0
move $s1, $t0
   # @free #1
   # @bz #1 main_L_1_else_begin
beq $t1, $0, main_L_1_else_begin
   # @printf STRING S_8
li $v0, 4
la $a0, S_8
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_1_else_begin :
main_L_1_else_begin:
   # i = 0
li $s2, 0
   # main_L_2_for_cond :
main_L_2_for_cond:
   # #0 = i LT 3
li $s3, 3
slt $t0, $s2, $s3
   # @free #0
   # @bz #0 main_L_2_for_end
beq $t0, $0, main_L_2_for_end
   # @j main_L_2_for_state
j main_L_2_for_state
nop
   # main_L_2_for_step :
main_L_2_for_step:
   # i = i ADD 1
addi $s2, $s2, 1
   # @j main_L_2_for_cond
j main_L_2_for_cond
nop
   # main_L_2_for_state :
main_L_2_for_state:
   # array ARRSET i i
sll $v0, $s2, 2
sub $v0, $fp, $v0
addi $v0, $v0, -32
sw $s2, 0($v0)
   # @j main_L_2_for_step
j main_L_2_for_step
nop
   # main_L_2_for_end :
main_L_2_for_end:
   # #0 = i SUB 3
addi $t0, $s2, -3
   # @free #0
   # array ARRSET #0 10
li $s4, 10
sll $v0, $t0, 2
sub $v0, $fp, $v0
addi $v0, $v0, -32
sw $s4, 0($v0)
   # j = 0
li $s5, 0
   # b = 2
li $s1, 2
   # i = 1
li $s2, 1
   # main_L_4_for_cond :
main_L_4_for_cond:
   # #0 = i GE 0
sge $t0, $s2, $0
   # @free #0
   # @bz #0 main_L_4_for_end
beq $t0, $0, main_L_4_for_end
   # @j main_L_4_for_state
j main_L_4_for_state
nop
   # main_L_4_for_step :
main_L_4_for_step:
   # i = i SUB 1
addi $s2, $s2, -1
   # @j main_L_4_for_cond
j main_L_4_for_cond
nop
   # main_L_4_for_state :
main_L_4_for_state:
   # #0 = array ARRGET i
sll $v0, $s2, 2
sub $v0, $fp, $v0
addi $v0, $v0, -32
lw $t0, 0($v0)
   # #1 = array ARRGET b
sll $v0, $s1, 2
sub $v0, $fp, $v0
addi $v0, $v0, -32
lw $t1, 0($v0)
   # @free #1
   # #0 = #0 GT #1
sgt $t0, $t0, $t1
   # @free #0
   # @bz #0 main_L_5_else_begin
beq $t0, $0, main_L_5_else_begin
   # b = i
move $s1, $s2
   # main_L_5_else_begin :
main_L_5_else_begin:
   # @j main_L_4_for_step
j main_L_4_for_step
nop
   # main_L_4_for_end :
main_L_4_for_end:
   # #0 = array ARRGET b
sll $v0, $s1, 2
sub $v0, $fp, $v0
addi $v0, $v0, -32
lw $t0, 0($v0)
   # #0 = #0 NEQ 10
sne $t0, $t0, $s4
   # @free #0
   # @bz #0 main_L_6_else_begin
beq $t0, $0, main_L_6_else_begin
   # @printf STRING S_9
li $v0, 4
la $a0, S_9
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_6_else_begin :
main_L_6_else_begin:
   # @printf STRING S_10
li $v0, 4
la $a0, S_10
syscall
   # #0 = array ARRGET 0
lw $t0, -32($fp)
   # #1 = array ARRGET 1
lw $t1, -36($fp)
   # @free #1
   # #0 = #0 ADD #1
add $t0, $t0, $t1
   # #1 = array ARRGET 2
lw $t1, -40($fp)
   # @free #1
   # #0 = #0 ADD #1
add $t0, $t0, $t1
   # #0 = #0 MUL 3
mul $t0, $t0, 3
   # #0 = #0 DIV 3
div $t0, $t0, 3
   # #0 = -1 ADD #0
li $s6, -1
add $t0, $s6, $t0
   # #0 = #0 ADD 1
addi $t0, $t0, 1
   # #0 = #0 ADD b
add $t0, $t0, $s1
   # #0 = #0 SUB b
sub $t0, $t0, $s1
   # @free #0
   # @printf INT #0
li $v0, 1
move $a0, $t0
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @push 13
   # @push 12
   # @call bg
sw $s1, -28($fp) # store b
sw $s2, -44($fp) # store i
sw $s5, -48($fp) # store j
li $s7, 12
move $a1, $s7
li $t2, 13
move $a0, $t2
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -44
jal bg_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @call _printf
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -12
jal _printf_E
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $fp, -4($sp)
   # a = 0
li $s0, 0
   # main_L_7_else_begin :
main_L_7_else_begin:
   # main_L_7_else_over :
main_L_7_else_over:
   # chtemp = 98
li $s1, 98
   # char_flag = 97
li $s2, 97
   # itemp = 0
li $s3, 0
   # main_L_9_dobegin :
main_L_9_dobegin:
   # i = 1
li $s4, 1
   # main_L_10_for_cond :
main_L_10_for_cond:
   # #0 = i LT 6
li $s5, 6
slt $t0, $s4, $s5
   # @free #0
   # @bz #0 main_L_10_for_end
beq $t0, $0, main_L_10_for_end
   # @j main_L_10_for_state
j main_L_10_for_state
nop
   # main_L_10_for_step :
main_L_10_for_step:
   # i = i ADD 1
addi $s4, $s4, 1
   # @j main_L_10_for_cond
j main_L_10_for_cond
nop
   # main_L_10_for_state :
main_L_10_for_state:
   # itemp = itemp ADD i
add $s3, $s3, $s4
   # @j main_L_10_for_step
j main_L_10_for_step
nop
   # main_L_10_for_end :
main_L_10_for_end:
   # #0 = itemp LE char_flag
sle $t0, $s3, $s2
   # @free #0
   # @bz #0 main_L_9_doend
beq $t0, $0, main_L_9_doend
   # @j main_L_9_dobegin
j main_L_9_dobegin
nop
   # main_L_9_doend :
main_L_9_doend:
   # #0 = itemp LE char_flag
sle $t0, $s3, $s2
   # @free #0
   # @bz #0 main_L_11_else_begin
beq $t0, $0, main_L_11_else_begin
   # @printf STRING S_12
li $v0, 4
la $a0, S_12
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_11_else_begin :
main_L_11_else_begin:
   # @j main_L_8_else_over
j main_L_8_else_over
nop
   # main_L_8_else_begin :
main_L_8_else_begin:
   # @printf STRING S_13
li $v0, 4
la $a0, S_13
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_8_else_over :
main_L_8_else_over:
   # list ARRSET 10 9
li $s6, 9
sw $s6, -88($gp)
   # list ARRSET 1 8
li $s7, 8
sw $s7, -52($gp)
   # list ARRSET 2 6
sw $s5, -56($gp)
   # list ARRSET 3 4
li $t1, 4
sw $t1, -60($gp)
   # list ARRSET 4 7
li $t2, 7
sw $t2, -64($gp)
   # list ARRSET 5 3
li $t3, 3
sw $t3, -68($gp)
   # list ARRSET 6 2
li $t4, 2
sw $t4, -72($gp)
   # list ARRSET 7 1
li $t5, 1
sw $t5, -76($gp)
   # list ARRSET 8 0
sw $0, -80($gp)
   # list ARRSET 9 5
li $t6, 5
sw $t6, -84($gp)
   # @push 1
   # @push 10
   # n = 10
li $t7, 10
   # @call quicksort
sw $s0, -24($fp) # store a
sw $s1, -20($fp) # store chtemp
sw $s2, -36($gp) # store char_flag
sw $s3, -52($fp) # store itemp
sw $s4, -44($fp) # store i
sw $t7, -452($gp) # store n
li $t8, 10
move $a1, $t8
move $a0, $t5
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # #0 = 1 LE n
li $s0, 1
lw $s1, -452($gp) # load n
sle $t0, $s0, $s1
   # i = 1
li $s2, 1
   # @free #0
   # @bz #0 main_L_12_for_end
beq $t0, $0, main_L_12_for_end
   # main_L_12_for_cond :
main_L_12_for_cond:
   # #0 = i LE n
sle $t0, $s2, $s1
   # @free #0
   # @bz #0 main_L_12_for_end
beq $t0, $0, main_L_12_for_end
   # @j main_L_12_for_state
j main_L_12_for_state
nop
   # main_L_12_for_step :
main_L_12_for_step:
   # i = i ADD 1
addi $s2, $s2, 1
   # @j main_L_12_for_cond
j main_L_12_for_cond
nop
   # main_L_12_for_state :
main_L_12_for_state:
   # #0 = list ARRGET i
sll $v0, $s2, 2
sub $v0, $gp, $v0
addi $v0, $v0, -48
lw $t0, 0($v0)
   # #1 = i SUB 1
addi $t1, $s2, -1
   # @free #1
   # #0 = #0 NEQ #1
sne $t0, $t0, $t1
   # @free #0
   # @bz #0 main_L_13_else_begin
beq $t0, $0, main_L_13_else_begin
   # @printf STRING S_14
li $v0, 4
la $a0, S_14
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_13_else_begin :
main_L_13_else_begin:
   # @j main_L_12_for_step
j main_L_12_for_step
nop
   # main_L_12_for_end :
main_L_12_for_end:
   # @push 99
   # @call int2char
sw $s2, -44($fp) # store i
li $s3, 99
move $a0, $s3
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # itemp = 99
li $s0, 99
   # #1 = #0 NEQ 97
li $s1, 97
sne $t1, $t0, $s1
   # @free #0
   # chtemp = #0
move $s2, $t0
   # @free #1
   # @bz #1 main_L_14_else_begin
beq $t1, $0, main_L_14_else_begin
   # @printf STRING S_15
li $v0, 4
la $a0, S_15
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_14_else_begin :
main_L_14_else_begin:
   # @push itemp
   # @call int2char
sw $s0, -52($fp) # store itemp
sw $s2, -20($fp) # store chtemp
move $a0, $s0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # @push #0
   # @call ascii2int
sw $t0, -56($fp) # store #0
move $a0, $t0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
move $t1, $v0
   # #1 = #1 GT 97
li $s0, 97
sgt $t1, $t1, $s0
   # @free #1
   # @bz #1 main_L_15_else_begin
beq $t1, $0, main_L_15_else_begin
   # @printf STRING S_16
li $v0, 4
la $a0, S_16
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_15_else_begin :
main_L_15_else_begin:
   # @push 2
   # @call int2char
li $s1, 2
move $a0, $s1
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # @push #0
   # @call ascii2int
sw $t0, -56($fp) # store #0
move $a0, $t0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
move $t1, $v0
   # #1 = #1 GT 60
li $s0, 60
sgt $t1, $t1, $s0
   # @free #1
   # @bz #1 main_L_16_else_begin
beq $t1, $0, main_L_16_else_begin
   # @printf STRING S_17
li $v0, 4
la $a0, S_17
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_16_else_begin :
main_L_16_else_begin:
   # @push itemp
   # @push chtemp
   # @call ascii2int
lw $s1, -20($fp) # load chtemp
move $a0, $s1
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # @push #0
   # @call bg
sw $t0, -56($fp) # store #0
move $a1, $t0
lw $s0, -52($fp) # load itemp
move $a0, $s0
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -44
jal bg_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # #1 = list ARRGET 10
lw $t1, -88($gp)
   # @push #1
   # @push 1
   # @push 2
   # @push 49
   # @push 4
   # @push 5
   # @push 6
   # @call sum
sw $t1, -60($fp) # store #1
li $s0, 6
sw $s0, -32($sp)
li $s1, 5
sw $s1, -28($sp)
li $s2, 4
move $a3, $s2
li $s3, 49
move $a2, $s3
li $s4, 2
move $a1, $s4
li $s5, 1
move $a0, $s5
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #2
move $t2, $v0
   # @push #2
   # #3 = True ARRGET 2
lw $t3, -8($gp)
   # @push #3
   # @push 20
   # @push 15
   # @call conFun
sw $t2, -64($fp) # store #2
sw $t3, -68($fp) # store #3
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -12
jal conFun_E
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #4
move $t4, $v0
   # @push #4
   # @call sum
sw $t4, -72($fp) # store #4
sw $t4, -32($sp)
li $s0, 15
sw $s0, -28($sp)
li $s1, 20
move $a3, $s1
lw $t3, -68($fp) # load #3
move $a2, $t3
lw $t2, -64($fp) # load #2
move $a1, $t2
lw $t1, -60($fp) # load #1
move $a0, $t1
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #5
move $t5, $v0
   # #5 = #5 NEQ 163
li $s0, 163
sne $t5, $t5, $s0
   # @free #5
   # @bz #5 main_L_17_else_begin
beq $t5, $0, main_L_17_else_begin
   # @printf STRING S_18
li $v0, 4
la $a0, S_18
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_17_else_begin :
main_L_17_else_begin:
   # @printf STRING S_19
li $v0, 4
la $a0, S_19
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_20
li $v0, 4
la $a0, S_20
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_21
li $v0, 4
la $a0, S_21
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_22
li $v0, 4
la $a0, S_22
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf CHAR 49
li $v0, 11
li $a0, 49
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_23
li $v0, 4
la $a0, S_23
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @call returnX
sw $ra, 0($sp)
sw $fp, -4($sp)
add $fp, $sp, $0
addi $sp, $sp, -16
jal returnX_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
move $t0, $v0
   # #0 = X EQ #0
lw $s0, -44($gp) # load X
seq $t0, $s0, $t0
   # @free #0
   # @bz #0 main_L_18_else_begin
beq $t0, $0, main_L_18_else_begin
   # @printf STRING S_24
li $v0, 4
la $a0, S_24
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_18_else_begin :
main_L_18_else_begin:
   # @ret
jr $ra
nop
