.data
S_0: .asciiz "error10"
S_1: .asciiz "error11"
S_2: .asciiz " T is "
S_3: .asciiz " underline is "
S_4: .asciiz " One error "
S_5: .asciiz " one error "
S_6: .asciiz "'s ascii is "
S_7: .asciiz " again, is "
S_8: .asciiz " error1 "
S_9: .asciiz " error2 "
S_10: .asciiz " sum is "
S_11: .asciiz " error3 "
S_12: .asciiz " error4 "
S_13: .asciiz " error5 "
S_14: .asciiz " error6 "
S_15: .asciiz " error7 "
S_16: .asciiz "error12"
S_17: .asciiz "error13"
S_18: .asciiz " error8 "
S_19: .asciiz " empty string"
S_20: .asciiz ""
S_21: .asciiz "Yeah"
S_22: .asciiz "!0#1$2%3&4'5(6)7*8+9,a-b.c/d~e:f;g<h=i>j?k@lm[n\\o]p^q_r`st{y|u}v"
S_23: .asciiz "wxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ "
S_24: .asciiz "yes"
.text
   # @array CHAR True 4
   # @array CHAR False 5
   # @var CHAR char_flag
   # @var INT int_flag
   # @var INT X
   # @array INT list 101
   # @var INT n
   # @call main
addu $fp, $sp, $0
sw $ra, 0($sp)
sw $fp, -4($sp)
addi $sp, $sp, -108
jal main_E
li $v0, 10
syscall
   # @exit
   # @func quicksort
quicksort_E:
   # @para INT left
   # @para INT right
   # @var INT i
   # @var INT j
   # @var INT t
   # @var INT temp
   # @var INT _temp
   # @var INT _con
   # #0 = left GT right
lw $t0, -12($fp)
lw $t1, -16($fp)
sgt $t0, $t0, $t1
sw $t0, -44($fp)
   # @bz #0 quicksort_L_0_else_begin
lw $t0, -44($fp)
beq $t0, $0, quicksort_L_0_else_begin
nop
   # @ret 
jr $ra
nop
   # quicksort_L_0_else_begin :
quicksort_L_0_else_begin:
   # #0 = list ARRGET left
lw $t1, -12($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -44($fp)
   # temp = #0
lw $t0, -44($fp)
sw $t0, -32($fp)
   # i = left
lw $t0, -12($fp)
sw $t0, -20($fp)
   # j = right
lw $t0, -16($fp)
sw $t0, -24($fp)
   # #0 = i NEQ j
lw $t0, -20($fp)
lw $t1, -24($fp)
sne $t0, $t0, $t1
sw $t0, -44($fp)
   # @bz #0 quicksort_L_1_else_begin
lw $t0, -44($fp)
beq $t0, $0, quicksort_L_1_else_begin
nop
   # quicksort_L_2_dobegin :
quicksort_L_2_dobegin:
   # _con = 0
li $t0, 0
sw $t0, -40($fp)
   # #1 = list ARRGET j
lw $t1, -24($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -48($fp)
   # #2 = #1 GE temp
lw $t0, -48($fp)
lw $t1, -32($fp)
sge $t0, $t0, $t1
sw $t0, -52($fp)
   # @bz #2 quicksort_L_3_else_begin
lw $t0, -52($fp)
beq $t0, $0, quicksort_L_3_else_begin
nop
   # #3 = i LT j
lw $t0, -20($fp)
lw $t1, -24($fp)
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #3 quicksort_L_4_else_begin
lw $t0, -56($fp)
beq $t0, $0, quicksort_L_4_else_begin
nop
   # _con = 1
li $t0, 1
sw $t0, -40($fp)
   # quicksort_L_4_else_begin :
quicksort_L_4_else_begin:
   # quicksort_L_3_else_begin :
quicksort_L_3_else_begin:
   # _temp = 0
li $t0, 0
sw $t0, -36($fp)
   # @bz _con quicksort_L_5_for_end
lw $t0, -40($fp)
beq $t0, $0, quicksort_L_5_for_end
nop
   # quicksort_L_5_for_cond :
quicksort_L_5_for_cond:
   # @bz _con quicksort_L_5_for_end
lw $t0, -40($fp)
beq $t0, $0, quicksort_L_5_for_end
nop
   # @j quicksort_L_5_for_state
j quicksort_L_5_for_state
nop
   # quicksort_L_5_for_step :
quicksort_L_5_for_step:
   # _temp = _temp ADD 1
lw $t0, -36($fp)
addi $t0, $t0, 1
sw $t0, -36($fp)
   # @j quicksort_L_5_for_cond
j quicksort_L_5_for_cond
nop
   # quicksort_L_5_for_state :
quicksort_L_5_for_state:
   # #1 = j SUB 1
lw $t0, -24($fp)
addi $t0, $t0, -1
sw $t0, -48($fp)
   # j = #1
lw $t0, -48($fp)
sw $t0, -24($fp)
   # _con = 0
li $t0, 0
sw $t0, -40($fp)
   # #1 = list ARRGET j
lw $t1, -24($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -48($fp)
   # #2 = #1 GE temp
lw $t0, -48($fp)
lw $t1, -32($fp)
sge $t0, $t0, $t1
sw $t0, -52($fp)
   # @bz #2 quicksort_L_6_else_begin
lw $t0, -52($fp)
beq $t0, $0, quicksort_L_6_else_begin
nop
   # #3 = i LT j
lw $t0, -20($fp)
lw $t1, -24($fp)
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #3 quicksort_L_7_else_begin
lw $t0, -56($fp)
beq $t0, $0, quicksort_L_7_else_begin
nop
   # _con = 1
li $t0, 1
sw $t0, -40($fp)
   # quicksort_L_7_else_begin :
quicksort_L_7_else_begin:
   # quicksort_L_6_else_begin :
quicksort_L_6_else_begin:
   # @j quicksort_L_5_for_step
j quicksort_L_5_for_step
nop
   # quicksort_L_5_for_end :
quicksort_L_5_for_end:
   # _con = 0
li $t0, 0
sw $t0, -40($fp)
   # #1 = list ARRGET i
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -48($fp)
   # #2 = #1 LE temp
lw $t0, -48($fp)
lw $t1, -32($fp)
sle $t0, $t0, $t1
sw $t0, -52($fp)
   # @bz #2 quicksort_L_8_else_begin
lw $t0, -52($fp)
beq $t0, $0, quicksort_L_8_else_begin
nop
   # #3 = i LT j
lw $t0, -20($fp)
lw $t1, -24($fp)
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #3 quicksort_L_9_else_begin
lw $t0, -56($fp)
beq $t0, $0, quicksort_L_9_else_begin
nop
   # _con = 1
li $t0, 1
sw $t0, -40($fp)
   # quicksort_L_9_else_begin :
quicksort_L_9_else_begin:
   # quicksort_L_8_else_begin :
quicksort_L_8_else_begin:
   # _temp = 0
li $t0, 0
sw $t0, -36($fp)
   # @bz _con quicksort_L_10_for_end
lw $t0, -40($fp)
beq $t0, $0, quicksort_L_10_for_end
nop
   # quicksort_L_10_for_cond :
quicksort_L_10_for_cond:
   # @bz _con quicksort_L_10_for_end
lw $t0, -40($fp)
beq $t0, $0, quicksort_L_10_for_end
nop
   # @j quicksort_L_10_for_state
j quicksort_L_10_for_state
nop
   # quicksort_L_10_for_step :
quicksort_L_10_for_step:
   # _temp = _temp ADD 1
lw $t0, -36($fp)
addi $t0, $t0, 1
sw $t0, -36($fp)
   # @j quicksort_L_10_for_cond
j quicksort_L_10_for_cond
nop
   # quicksort_L_10_for_state :
quicksort_L_10_for_state:
   # #1 = i ADD 1
lw $t0, -20($fp)
addi $t0, $t0, 1
sw $t0, -48($fp)
   # i = #1
lw $t0, -48($fp)
sw $t0, -20($fp)
   # _con = 0
li $t0, 0
sw $t0, -40($fp)
   # #1 = list ARRGET i
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -48($fp)
   # #2 = #1 LE temp
lw $t0, -48($fp)
lw $t1, -32($fp)
sle $t0, $t0, $t1
sw $t0, -52($fp)
   # @bz #2 quicksort_L_11_else_begin
lw $t0, -52($fp)
beq $t0, $0, quicksort_L_11_else_begin
nop
   # #3 = i LT j
lw $t0, -20($fp)
lw $t1, -24($fp)
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #3 quicksort_L_12_else_begin
lw $t0, -56($fp)
beq $t0, $0, quicksort_L_12_else_begin
nop
   # _con = 1
li $t0, 1
sw $t0, -40($fp)
   # quicksort_L_12_else_begin :
quicksort_L_12_else_begin:
   # quicksort_L_11_else_begin :
quicksort_L_11_else_begin:
   # @j quicksort_L_10_for_step
j quicksort_L_10_for_step
nop
   # quicksort_L_10_for_end :
quicksort_L_10_for_end:
   # #1 = i LT j
lw $t0, -20($fp)
lw $t1, -24($fp)
slt $t0, $t0, $t1
sw $t0, -48($fp)
   # @bz #1 quicksort_L_13_else_begin
lw $t0, -48($fp)
beq $t0, $0, quicksort_L_13_else_begin
nop
   # #2 = list ARRGET i
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -52($fp)
   # t = #2
lw $t0, -52($fp)
sw $t0, -28($fp)
   # #2 = list ARRGET j
lw $t1, -24($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -52($fp)
   # list ARRSET i #2
lw $t0, -52($fp)
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
sw $t0, 0($t1)
   # list ARRSET j t
lw $t0, -28($fp)
lw $t1, -24($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
sw $t0, 0($t1)
   # quicksort_L_13_else_begin :
quicksort_L_13_else_begin:
   # #1 = i NEQ j
lw $t0, -20($fp)
lw $t1, -24($fp)
sne $t0, $t0, $t1
sw $t0, -48($fp)
   # @bz #1 quicksort_L_2_doend
lw $t0, -48($fp)
beq $t0, $0, quicksort_L_2_doend
nop
   # @j quicksort_L_2_dobegin
j quicksort_L_2_dobegin
nop
   # quicksort_L_2_doend :
quicksort_L_2_doend:
   # quicksort_L_1_else_begin :
quicksort_L_1_else_begin:
   # #0 = list ARRGET i
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -44($fp)
   # list ARRSET left #0
lw $t0, -44($fp)
lw $t1, -12($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
sw $t0, 0($t1)
   # list ARRSET i temp
lw $t0, -32($fp)
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
sw $t0, 0($t1)
   # @push left
   # #0 = i SUB 1
lw $t0, -20($fp)
addi $t0, $t0, -1
sw $t0, -44($fp)
   # @push #0
   # @call quicksort
lw $t0, -44($fp)
sw $t0, -16($sp)
lw $t0, -12($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # #0 = i ADD 1
lw $t0, -20($fp)
addi $t0, $t0, 1
sw $t0, -44($fp)
   # @push #0
   # @push right
   # @call quicksort
lw $t0, -16($fp)
sw $t0, -16($sp)
lw $t0, -44($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @ret 
jr $ra
nop
   # @func F
F_E:
   # @para INT no
   # #0 = no EQ 0
lw $t0, -12($fp)
li $t1, 0
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 F_L_0_else_begin
lw $t0, -16($fp)
beq $t0, $0, F_L_0_else_begin
nop
   # @ret 1
li $v0, 1
jr $ra
nop
   # F_L_0_else_begin :
F_L_0_else_begin:
   # #0 = no EQ 1
lw $t0, -12($fp)
li $t1, 1
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 F_L_1_else_begin
lw $t0, -16($fp)
beq $t0, $0, F_L_1_else_begin
nop
   # @ret 1
li $v0, 1
jr $ra
nop
   # F_L_1_else_begin :
F_L_1_else_begin:
   # #0 = no SUB 1
lw $t0, -12($fp)
addi $t0, $t0, -1
sw $t0, -16($fp)
   # @push #0
   # @call F
lw $t0, -16($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -20($fp)
   # #2 = no SUB 2
lw $t0, -12($fp)
addi $t0, $t0, -2
sw $t0, -24($fp)
   # @push #2
   # @call F
lw $t0, -24($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #3
sw $v0, -28($fp)
   # #4 = #1 ADD #3
lw $t0, -20($fp)
lw $t1, -28($fp)
addu $t0, $t0, $t1
sw $t0, -32($fp)
   # @ret #4
lw $v0, -32($fp)
jr $ra
nop
   # @func bg
bg_E:
   # @para INT a
   # @para INT b
   # @var INT temp
   # @var INT i
   # #0 = a GT b
lw $t0, -12($fp)
lw $t1, -16($fp)
sgt $t0, $t0, $t1
sw $t0, -28($fp)
   # @bz #0 bg_L_0_else_begin
lw $t0, -28($fp)
beq $t0, $0, bg_L_0_else_begin
nop
   # temp = 3
li $t0, 3
sw $t0, -20($fp)
   # @j bg_L_0_else_over
j bg_L_0_else_over
nop
   # bg_L_0_else_begin :
bg_L_0_else_begin:
   # temp = 4
li $t0, 4
sw $t0, -20($fp)
   # bg_L_0_else_over :
bg_L_0_else_over:
   # #0 = temp GE 3
lw $t0, -20($fp)
li $t1, 3
sge $t0, $t0, $t1
sw $t0, -28($fp)
   # @bz #0 bg_L_1_else_begin
lw $t0, -28($fp)
beq $t0, $0, bg_L_1_else_begin
nop
   # #1 = temp NEQ 4
lw $t0, -20($fp)
li $t1, 4
sne $t0, $t0, $t1
sw $t0, -32($fp)
   # @bz #1 bg_L_2_else_begin
lw $t0, -32($fp)
beq $t0, $0, bg_L_2_else_begin
nop
   # #2 = True ARRGET temp
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 0
lw $t0, 0($t1)
sw $t0, -36($fp)
   # #3 = #2 NEQ 47
lw $t0, -36($fp)
li $t1, 47
sne $t0, $t0, $t1
sw $t0, -40($fp)
   # @bz #3 bg_L_3_else_begin
lw $t0, -40($fp)
beq $t0, $0, bg_L_3_else_begin
nop
   # @printf STRING S_0
li $v0, 4
la $a0, S_0
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j bg_L_3_else_over
j bg_L_3_else_over
nop
   # bg_L_3_else_begin :
bg_L_3_else_begin:
   # @ret 
jr $ra
nop
   # bg_L_3_else_over :
bg_L_3_else_over:
   # @j bg_L_2_else_over
j bg_L_2_else_over
nop
   # bg_L_2_else_begin :
bg_L_2_else_begin:
   # #2 = False ARRGET temp
lw $t1, -20($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 16
lw $t0, 0($t1)
sw $t0, -36($fp)
   # #3 = #2 NEQ 45
lw $t0, -36($fp)
li $t1, 45
sne $t0, $t0, $t1
sw $t0, -40($fp)
   # @bz #3 bg_L_4_else_begin
lw $t0, -40($fp)
beq $t0, $0, bg_L_4_else_begin
nop
   # @printf STRING S_1
li $v0, 4
la $a0, S_1
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # bg_L_4_else_begin :
bg_L_4_else_begin:
   # bg_L_2_else_over :
bg_L_2_else_over:
   # bg_L_1_else_begin :
bg_L_1_else_begin:
   # True ARRSET 2 84
li $t0, 84
sw $t0, 8($gp)
   # @ret 
jr $ra
nop
   # @func _printf
_printf_E:
   # @printf STRING S_2
li $v0, 4
la $a0, S_2
syscall
   # @printf CHAR 84
li $v0, 11
li $a0, 84
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_3
li $v0, 4
la $a0, S_3
syscall
   # @printf CHAR 95
li $v0, 11
li $a0, 95
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j _printf_L_0_else_begin
j _printf_L_0_else_begin
nop
   # @printf STRING S_4
li $v0, 4
la $a0, S_4
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # _printf_L_0_else_begin :
_printf_L_0_else_begin:
   # @j _printf_L_1_else_begin
j _printf_L_1_else_begin
nop
   # @printf STRING S_5
li $v0, 4
la $a0, S_5
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # _printf_L_1_else_begin :
_printf_L_1_else_begin:
   # @ret 
jr $ra
nop
   # @func _scanf
_scanf_E:
   # @var CHAR temp
   # @scanf CHAR temp
li $v0, 12
syscall
sw $v0, -12($fp)
   # @ret temp
lw $v0, -12($fp)
jr $ra
nop
   # @func int2char
int2char_E:
   # @para INT no
   # #0 = no EQ 43
lw $t0, -12($fp)
li $t1, 43
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_0_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_0_else_begin
nop
   # @ret 43
li $v0, 43
jr $ra
nop
   # int2char_L_0_else_begin :
int2char_L_0_else_begin:
   # #0 = no EQ 45
lw $t0, -12($fp)
li $t1, 45
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_1_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_1_else_begin
nop
   # @ret 45
li $v0, 45
jr $ra
nop
   # int2char_L_1_else_begin :
int2char_L_1_else_begin:
   # #0 = no EQ 42
lw $t0, -12($fp)
li $t1, 42
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_2_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_2_else_begin
nop
   # @ret 42
li $v0, 42
jr $ra
nop
   # int2char_L_2_else_begin :
int2char_L_2_else_begin:
   # #0 = no EQ 47
lw $t0, -12($fp)
li $t1, 47
seq $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_3_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_3_else_begin
nop
   # @ret 47
li $v0, 47
jr $ra
nop
   # int2char_L_3_else_begin :
int2char_L_3_else_begin:
   # #0 = no LE 57
lw $t0, -12($fp)
li $t1, 57
sle $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_4_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_4_else_begin
nop
   # #1 = no GE 48
lw $t0, -12($fp)
li $t1, 48
sge $t0, $t0, $t1
sw $t0, -20($fp)
   # @bz #1 int2char_L_5_else_begin
lw $t0, -20($fp)
beq $t0, $0, int2char_L_5_else_begin
nop
   # @ret 49
li $v0, 49
jr $ra
nop
   # int2char_L_5_else_begin :
int2char_L_5_else_begin:
   # int2char_L_4_else_begin :
int2char_L_4_else_begin:
   # #0 = no LE 90
lw $t0, -12($fp)
li $t1, 90
sle $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_6_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_6_else_begin
nop
   # #1 = no GE 65
lw $t0, -12($fp)
li $t1, 65
sge $t0, $t0, $t1
sw $t0, -20($fp)
   # @bz #1 int2char_L_7_else_begin
lw $t0, -20($fp)
beq $t0, $0, int2char_L_7_else_begin
nop
   # @ret 65
li $v0, 65
jr $ra
nop
   # int2char_L_7_else_begin :
int2char_L_7_else_begin:
   # int2char_L_6_else_begin :
int2char_L_6_else_begin:
   # #0 = no LE 122
lw $t0, -12($fp)
li $t1, 122
sle $t0, $t0, $t1
sw $t0, -16($fp)
   # @bz #0 int2char_L_8_else_begin
lw $t0, -16($fp)
beq $t0, $0, int2char_L_8_else_begin
nop
   # #1 = no GE 97
lw $t0, -12($fp)
li $t1, 97
sge $t0, $t0, $t1
sw $t0, -20($fp)
   # @bz #1 int2char_L_9_else_begin
lw $t0, -20($fp)
beq $t0, $0, int2char_L_9_else_begin
nop
   # @ret 97
li $v0, 97
jr $ra
nop
   # int2char_L_9_else_begin :
int2char_L_9_else_begin:
   # int2char_L_8_else_begin :
int2char_L_8_else_begin:
   # @ret 48
li $v0, 48
jr $ra
nop
   # @func ascii2int
ascii2int_E:
   # @para CHAR chtemp
   # @ret chtemp
lw $v0, -12($fp)
jr $ra
nop
   # @func sum
sum_E:
   # @para INT a1
   # @para INT a2
   # @para CHAR a3
   # @para INT a4
   # @para INT a5
   # @para INT a6
   # @var INT temp
   # #0 = a1 ADD a2
lw $t0, -12($fp)
lw $t1, -16($fp)
addu $t0, $t0, $t1
sw $t0, -40($fp)
   # #0 = #0 ADD a3
lw $t0, -40($fp)
lw $t1, -20($fp)
addu $t0, $t0, $t1
sw $t0, -40($fp)
   # #0 = #0 ADD a4
lw $t0, -40($fp)
lw $t1, -24($fp)
addu $t0, $t0, $t1
sw $t0, -40($fp)
   # #0 = #0 ADD a5
lw $t0, -40($fp)
lw $t1, -28($fp)
addu $t0, $t0, $t1
sw $t0, -40($fp)
   # #0 = #0 ADD a6
lw $t0, -40($fp)
lw $t1, -32($fp)
addu $t0, $t0, $t1
sw $t0, -40($fp)
   # temp = #0
lw $t0, -40($fp)
sw $t0, -36($fp)
   # @ret temp
lw $v0, -36($fp)
jr $ra
nop
   # @func conFun
conFun_E:
   # @ret 10
li $v0, 10
jr $ra
nop
   # @func returnX
returnX_E:
   # #0 = X ADD 1
lw $t0, 44($gp)
addi $t0, $t0, 1
sw $t0, -12($fp)
   # X = #0
lw $t0, -12($fp)
sw $t0, 44($gp)
   # @ret X
lw $v0, 44($gp)
jr $ra
nop
   # @func main
main_E:
   # @var CHAR proc
   # @var CHAR iproc
   # @var CHAR chtemp
   # @var INT a
   # @var INT b
   # @array INT array 3
   # @var INT i
   # @var INT j
   # @var INT itemp
   # True ARRSET 0 84
li $t0, 84
sw $t0, 0($gp)
   # True ARRSET 1 114
li $t0, 114
sw $t0, 4($gp)
   # True ARRSET 2 42
li $t0, 42
sw $t0, 8($gp)
   # True ARRSET 3 47
li $t0, 47
sw $t0, 12($gp)
   # False ARRSET 0 70
li $t0, 70
sw $t0, 16($gp)
   # False ARRSET 1 97
li $t0, 97
sw $t0, 20($gp)
   # False ARRSET 2 108
li $t0, 108
sw $t0, 24($gp)
   # False ARRSET 3 43
li $t0, 43
sw $t0, 28($gp)
   # False ARRSET 4 45
li $t0, 45
sw $t0, 32($gp)
   # @scanf CHAR chtemp
li $v0, 12
syscall
sw $v0, -20($fp)
   # @push chtemp
   # @call ascii2int
lw $t0, -20($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # a = #0
lw $t0, -56($fp)
sw $t0, -24($fp)
   # @printf STRING S_6
li $v0, 4
la $a0, S_6
syscall
   # @printf INT a
li $v0, 1
lw $a0, -24($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @call _scanf
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal _scanf_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # chtemp = #0
lw $t0, -56($fp)
sw $t0, -20($fp)
   # @printf STRING S_7
li $v0, 4
la $a0, S_7
syscall
   # @printf INT chtemp
li $v0, 1
lw $a0, -20($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_0_dobegin :
main_L_0_dobegin:
   # @scanf INT itemp
li $v0, 5
syscall
sw $v0, -52($fp)
   # @push itemp
   # @call F
lw $t0, -52($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # @printf INT #0
li $v0, 1
lw $a0, -56($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_0_doend :
main_L_0_doend:
   # b = 10
li $t0, 10
sw $t0, -28($fp)
   # @push b
   # @call F
lw $t0, -28($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -36
jal F_E
addi $sp, $sp, 36
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # b = #0
lw $t0, -56($fp)
sw $t0, -28($fp)
   # #0 = b NEQ 89
lw $t0, -28($fp)
li $t1, 89
sne $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_1_else_begin
lw $t0, -56($fp)
beq $t0, $0, main_L_1_else_begin
nop
   # @printf STRING S_8
li $v0, 4
la $a0, S_8
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_1_else_begin :
main_L_1_else_begin:
   # i = 0
li $t0, 0
sw $t0, -44($fp)
   # #0 = i LT 3
lw $t0, -44($fp)
li $t1, 3
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_2_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_2_for_end
nop
   # main_L_2_for_cond :
main_L_2_for_cond:
   # #0 = i LT 3
lw $t0, -44($fp)
li $t1, 3
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_2_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_2_for_end
nop
   # @j main_L_2_for_state
j main_L_2_for_state
nop
   # main_L_2_for_step :
main_L_2_for_step:
   # i = i ADD 1
lw $t0, -44($fp)
addi $t0, $t0, 1
sw $t0, -44($fp)
   # @j main_L_2_for_cond
j main_L_2_for_cond
nop
   # main_L_2_for_state :
main_L_2_for_state:
   # array ARRSET i i
lw $t0, -44($fp)
lw $t1, -44($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
sw $t0, 0($t1)
   # @j main_L_2_for_step
j main_L_2_for_step
nop
   # main_L_2_for_end :
main_L_2_for_end:
   # j = 0
li $t0, 0
sw $t0, -48($fp)
   # #0 = j LT 0
lw $t0, -48($fp)
li $t1, 0
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_3_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_3_for_end
nop
   # main_L_3_for_cond :
main_L_3_for_cond:
   # #0 = j LT 0
lw $t0, -48($fp)
li $t1, 0
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_3_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_3_for_end
nop
   # @j main_L_3_for_state
j main_L_3_for_state
nop
   # main_L_3_for_step :
main_L_3_for_step:
   # j = j ADD 1
lw $t0, -48($fp)
addi $t0, $t0, 1
sw $t0, -48($fp)
   # @j main_L_3_for_cond
j main_L_3_for_cond
nop
   # main_L_3_for_state :
main_L_3_for_state:
   # array ARRSET j i
lw $t0, -44($fp)
lw $t1, -48($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
sw $t0, 0($t1)
   # @j main_L_3_for_step
j main_L_3_for_step
nop
   # main_L_3_for_end :
main_L_3_for_end:
   # #0 = i SUB 3
lw $t0, -44($fp)
addi $t0, $t0, -3
sw $t0, -56($fp)
   # array ARRSET #0 10
li $t0, 10
lw $t1, -56($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
sw $t0, 0($t1)
   # b = 2
li $t0, 2
sw $t0, -28($fp)
   # i = 1
li $t0, 1
sw $t0, -44($fp)
   # #0 = i GE 0
lw $t0, -44($fp)
li $t1, 0
sge $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_4_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_4_for_end
nop
   # main_L_4_for_cond :
main_L_4_for_cond:
   # #0 = i GE 0
lw $t0, -44($fp)
li $t1, 0
sge $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_4_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_4_for_end
nop
   # @j main_L_4_for_state
j main_L_4_for_state
nop
   # main_L_4_for_step :
main_L_4_for_step:
   # i = i SUB 1
lw $t0, -44($fp)
addi $t0, $t0, -1
sw $t0, -44($fp)
   # @j main_L_4_for_cond
j main_L_4_for_cond
nop
   # main_L_4_for_state :
main_L_4_for_state:
   # #1 = array ARRGET i
lw $t1, -44($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
lw $t0, 0($t1)
sw $t0, -60($fp)
   # #2 = array ARRGET b
lw $t1, -28($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
lw $t0, 0($t1)
sw $t0, -64($fp)
   # #3 = #1 GT #2
lw $t0, -60($fp)
lw $t1, -64($fp)
sgt $t0, $t0, $t1
sw $t0, -68($fp)
   # @bz #3 main_L_5_else_begin
lw $t0, -68($fp)
beq $t0, $0, main_L_5_else_begin
nop
   # b = i
lw $t0, -44($fp)
sw $t0, -28($fp)
   # main_L_5_else_begin :
main_L_5_else_begin:
   # @j main_L_4_for_step
j main_L_4_for_step
nop
   # main_L_4_for_end :
main_L_4_for_end:
   # #0 = array ARRGET b
lw $t1, -28($fp)
sll $t1, $t1, 2
subu $t1, $fp, $t1
addi $t1, $t1, -32
lw $t0, 0($t1)
sw $t0, -56($fp)
   # #1 = #0 NEQ 10
lw $t0, -56($fp)
li $t1, 10
sne $t0, $t0, $t1
sw $t0, -60($fp)
   # @bz #1 main_L_6_else_begin
lw $t0, -60($fp)
beq $t0, $0, main_L_6_else_begin
nop
   # @printf STRING S_9
li $v0, 4
la $a0, S_9
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_6_else_begin :
main_L_6_else_begin:
   # @printf STRING S_10
li $v0, 4
la $a0, S_10
syscall
   # #0 = array ARRGET 0
lw $t0, -32($fp)
sw $t0, -56($fp)
   # #1 = array ARRGET 1
lw $t0, -36($fp)
sw $t0, -60($fp)
   # #2 = #0 ADD #1
lw $t0, -56($fp)
lw $t1, -60($fp)
addu $t0, $t0, $t1
sw $t0, -64($fp)
   # #3 = array ARRGET 2
lw $t0, -40($fp)
sw $t0, -68($fp)
   # #2 = #2 ADD #3
lw $t0, -64($fp)
lw $t1, -68($fp)
addu $t0, $t0, $t1
sw $t0, -64($fp)
   # #4 = #2 MUL 3
lw $t0, -64($fp)
mul $t0, $t0, 3
sw $t0, -72($fp)
   # #4 = #4 DIV 3
lw $t0, -72($fp)
div $t0, $t0, 3
sw $t0, -72($fp)
   # #5 = -1
li $t0, -1
sw $t0, -76($fp)
   # #5 = #5 ADD #4
lw $t0, -76($fp)
lw $t1, -72($fp)
addu $t0, $t0, $t1
sw $t0, -76($fp)
   # #5 = #5 ADD 1
lw $t0, -76($fp)
addi $t0, $t0, 1
sw $t0, -76($fp)
   # #5 = #5 ADD b
lw $t0, -76($fp)
lw $t1, -28($fp)
addu $t0, $t0, $t1
sw $t0, -76($fp)
   # #5 = #5 SUB b
lw $t0, -76($fp)
lw $t1, -28($fp)
subu $t0, $t0, $t1
sw $t0, -76($fp)
   # @printf INT #5
li $v0, 1
lw $a0, -76($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # a = 13
li $t0, 13
sw $t0, -24($fp)
   # @push a
   # @push 12
   # @call bg
li $t0, 12
sw $t0, -16($sp)
lw $t0, -24($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal bg_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @call _printf
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -12
jal _printf_E
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $fp, -4($sp)
   # a = 0
li $t0, 0
sw $t0, -24($fp)
   # @bz a main_L_7_else_begin
lw $t0, -24($fp)
beq $t0, $0, main_L_7_else_begin
nop
   # @printf STRING S_11
li $v0, 4
la $a0, S_11
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @j main_L_7_else_over
j main_L_7_else_over
nop
   # main_L_7_else_begin :
main_L_7_else_begin:
   # main_L_7_else_over :
main_L_7_else_over:
   # chtemp = 98
li $t0, 98
sw $t0, -20($fp)
   # @bz chtemp main_L_8_else_begin
lw $t0, -20($fp)
beq $t0, $0, main_L_8_else_begin
nop
   # char_flag = 97
li $t0, 97
sw $t0, 36($gp)
   # itemp = 0
li $t0, 0
sw $t0, -52($fp)
   # main_L_9_dobegin :
main_L_9_dobegin:
   # i = 1
li $t0, 1
sw $t0, -44($fp)
   # #0 = i LT 6
lw $t0, -44($fp)
li $t1, 6
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_10_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_10_for_end
nop
   # main_L_10_for_cond :
main_L_10_for_cond:
   # #0 = i LT 6
lw $t0, -44($fp)
li $t1, 6
slt $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_10_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_10_for_end
nop
   # @j main_L_10_for_state
j main_L_10_for_state
nop
   # main_L_10_for_step :
main_L_10_for_step:
   # i = i ADD 1
lw $t0, -44($fp)
addi $t0, $t0, 1
sw $t0, -44($fp)
   # @j main_L_10_for_cond
j main_L_10_for_cond
nop
   # main_L_10_for_state :
main_L_10_for_state:
   # #1 = itemp ADD i
lw $t0, -52($fp)
lw $t1, -44($fp)
addu $t0, $t0, $t1
sw $t0, -60($fp)
   # itemp = #1
lw $t0, -60($fp)
sw $t0, -52($fp)
   # @j main_L_10_for_step
j main_L_10_for_step
nop
   # main_L_10_for_end :
main_L_10_for_end:
   # #0 = itemp LE char_flag
lw $t0, -52($fp)
lw $t1, 36($gp)
sle $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_9_doend
lw $t0, -56($fp)
beq $t0, $0, main_L_9_doend
nop
   # @j main_L_9_dobegin
j main_L_9_dobegin
nop
   # main_L_9_doend :
main_L_9_doend:
   # #0 = itemp LE char_flag
lw $t0, -52($fp)
lw $t1, 36($gp)
sle $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_11_else_begin
lw $t0, -56($fp)
beq $t0, $0, main_L_11_else_begin
nop
   # @printf STRING S_12
li $v0, 4
la $a0, S_12
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_11_else_begin :
main_L_11_else_begin:
   # @j main_L_8_else_over
j main_L_8_else_over
nop
   # main_L_8_else_begin :
main_L_8_else_begin:
   # @printf STRING S_13
li $v0, 4
la $a0, S_13
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_8_else_over :
main_L_8_else_over:
   # n = 10
li $t0, 10
sw $t0, 452($gp)
   # list ARRSET 10 9
li $t0, 9
sw $t0, 88($gp)
   # list ARRSET 1 8
li $t0, 8
sw $t0, 52($gp)
   # list ARRSET 2 6
li $t0, 6
sw $t0, 56($gp)
   # list ARRSET 3 4
li $t0, 4
sw $t0, 60($gp)
   # list ARRSET 4 7
li $t0, 7
sw $t0, 64($gp)
   # list ARRSET 5 3
li $t0, 3
sw $t0, 68($gp)
   # list ARRSET 6 2
li $t0, 2
sw $t0, 72($gp)
   # list ARRSET 7 1
li $t0, 1
sw $t0, 76($gp)
   # list ARRSET 8 0
li $t0, 0
sw $t0, 80($gp)
   # list ARRSET 9 5
li $t0, 5
sw $t0, 84($gp)
   # @push 1
   # @push n
   # @call quicksort
lw $t0, 452($gp)
sw $t0, -16($sp)
li $t0, 1
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -60
jal quicksort_E
addi $sp, $sp, 60
lw $ra, 0($sp)
lw $fp, -4($sp)
   # i = 1
li $t0, 1
sw $t0, -44($fp)
   # #0 = i LE n
lw $t0, -44($fp)
lw $t1, 452($gp)
sle $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_12_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_12_for_end
nop
   # main_L_12_for_cond :
main_L_12_for_cond:
   # #0 = i LE n
lw $t0, -44($fp)
lw $t1, 452($gp)
sle $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_12_for_end
lw $t0, -56($fp)
beq $t0, $0, main_L_12_for_end
nop
   # @j main_L_12_for_state
j main_L_12_for_state
nop
   # main_L_12_for_step :
main_L_12_for_step:
   # i = i ADD 1
lw $t0, -44($fp)
addi $t0, $t0, 1
sw $t0, -44($fp)
   # @j main_L_12_for_cond
j main_L_12_for_cond
nop
   # main_L_12_for_state :
main_L_12_for_state:
   # #1 = list ARRGET i
lw $t1, -44($fp)
sll $t1, $t1, 2
addu $t1, $gp, $t1
addi $t1, $t1, 48
lw $t0, 0($t1)
sw $t0, -60($fp)
   # #2 = i SUB 1
lw $t0, -44($fp)
addi $t0, $t0, -1
sw $t0, -64($fp)
   # #3 = #1 NEQ #2
lw $t0, -60($fp)
lw $t1, -64($fp)
sne $t0, $t0, $t1
sw $t0, -68($fp)
   # @bz #3 main_L_13_else_begin
lw $t0, -68($fp)
beq $t0, $0, main_L_13_else_begin
nop
   # @printf STRING S_14
li $v0, 4
la $a0, S_14
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_13_else_begin :
main_L_13_else_begin:
   # @j main_L_12_for_step
j main_L_12_for_step
nop
   # main_L_12_for_end :
main_L_12_for_end:
   # itemp = 99
li $t0, 99
sw $t0, -52($fp)
   # @push itemp
   # @call int2char
lw $t0, -52($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # chtemp = #0
lw $t0, -56($fp)
sw $t0, -20($fp)
   # #0 = chtemp NEQ 97
lw $t0, -20($fp)
li $t1, 97
sne $t0, $t0, $t1
sw $t0, -56($fp)
   # @bz #0 main_L_14_else_begin
lw $t0, -56($fp)
beq $t0, $0, main_L_14_else_begin
nop
   # @printf STRING S_15
li $v0, 4
la $a0, S_15
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_14_else_begin :
main_L_14_else_begin:
   # @push itemp
   # @call int2char
lw $t0, -52($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # @push #0
   # @call ascii2int
lw $t0, -56($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -60($fp)
   # #2 = #1 GT 97
lw $t0, -60($fp)
li $t1, 97
sgt $t0, $t0, $t1
sw $t0, -64($fp)
   # @bz #2 main_L_15_else_begin
lw $t0, -64($fp)
beq $t0, $0, main_L_15_else_begin
nop
   # @printf STRING S_16
li $v0, 4
la $a0, S_16
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_15_else_begin :
main_L_15_else_begin:
   # @push 2
   # @call int2char
li $t0, 2
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -24
jal int2char_E
addi $sp, $sp, 24
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # @push #0
   # @call ascii2int
lw $t0, -56($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -60($fp)
   # #2 = #1 GT 60
lw $t0, -60($fp)
li $t1, 60
sgt $t0, $t0, $t1
sw $t0, -64($fp)
   # @bz #2 main_L_16_else_begin
lw $t0, -64($fp)
beq $t0, $0, main_L_16_else_begin
nop
   # @printf STRING S_17
li $v0, 4
la $a0, S_17
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_16_else_begin :
main_L_16_else_begin:
   # @push itemp
   # @push chtemp
   # @call ascii2int
lw $t0, -20($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal ascii2int_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #0
sw $v0, -56($fp)
   # @push #0
   # @call bg
lw $t0, -56($fp)
sw $t0, -16($sp)
lw $t0, -52($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal bg_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # #0 = list ARRGET 10
lw $t0, 88($gp)
sw $t0, -56($fp)
   # @push #0
   # @push 1
   # @push 2
   # @push 49
   # @push 4
   # @push 5
   # @push 6
   # @call sum
li $t0, 6
sw $t0, -32($sp)
li $t0, 5
sw $t0, -28($sp)
li $t0, 4
sw $t0, -24($sp)
li $t0, 49
sw $t0, -20($sp)
li $t0, 2
sw $t0, -16($sp)
li $t0, 1
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -60($fp)
   # @push #1
   # #2 = True ARRGET 2
lw $t0, 8($gp)
sw $t0, -64($fp)
   # @push #2
   # @push 20
   # @push 15
   # @call conFun
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -12
jal conFun_E
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #3
sw $v0, -68($fp)
   # @push #3
   # @call sum
lw $t0, -68($fp)
sw $t0, -32($sp)
li $t0, 15
sw $t0, -28($sp)
li $t0, 20
sw $t0, -24($sp)
lw $t0, -64($fp)
sw $t0, -20($sp)
lw $t0, -60($fp)
sw $t0, -16($sp)
lw $t0, -56($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #4
sw $v0, -72($fp)
   # #5 = #4 NEQ 163
lw $t0, -72($fp)
li $t1, 163
sne $t0, $t0, $t1
sw $t0, -76($fp)
   # @bz #5 main_L_17_else_begin
lw $t0, -76($fp)
beq $t0, $0, main_L_17_else_begin
nop
   # #6 = list ARRGET 10
lw $t0, 88($gp)
sw $t0, -80($fp)
   # @push #6
   # @push 1
   # @push 2
   # @push 49
   # @push 4
   # @push 5
   # @push 6
   # @call sum
li $t0, 6
sw $t0, -32($sp)
li $t0, 5
sw $t0, -28($sp)
li $t0, 4
sw $t0, -24($sp)
li $t0, 49
sw $t0, -20($sp)
li $t0, 2
sw $t0, -16($sp)
li $t0, 1
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #7
sw $v0, -84($fp)
   # @push #7
   # #8 = True ARRGET 2
lw $t0, 8($gp)
sw $t0, -88($fp)
   # @push #8
   # @push 20
   # @push 15
   # @call conFun
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -12
jal conFun_E
addi $sp, $sp, 12
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #9
sw $v0, -92($fp)
   # @push #9
   # @call sum
lw $t0, -92($fp)
sw $t0, -32($sp)
li $t0, 15
sw $t0, -28($sp)
li $t0, 20
sw $t0, -24($sp)
lw $t0, -88($fp)
sw $t0, -20($sp)
lw $t0, -84($fp)
sw $t0, -16($sp)
lw $t0, -80($fp)
sw $t0, -12($sp)
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -44
jal sum_E
addi $sp, $sp, 44
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #10
sw $v0, -96($fp)
   # @printf INT #10
li $v0, 1
lw $a0, -96($fp)
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_18
li $v0, 4
la $a0, S_18
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_17_else_begin :
main_L_17_else_begin:
   # @printf STRING S_19
li $v0, 4
la $a0, S_19
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_20
li $v0, 4
la $a0, S_20
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_21
li $v0, 4
la $a0, S_21
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_22
li $v0, 4
la $a0, S_22
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf CHAR 49
li $v0, 11
li $a0, 49
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # @printf STRING S_23
li $v0, 4
la $a0, S_23
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # #0 = X ADD 0
lw $t0, 44($gp)
addi $t0, $t0, 0
sw $t0, -56($fp)
   # @call returnX
sw $ra, 0($sp)
sw $fp, -4($sp)
addu $fp, $sp, $0
addi $sp, $sp, -16
jal returnX_E
addi $sp, $sp, 16
lw $ra, 0($sp)
lw $fp, -4($sp)
   # @get #1
sw $v0, -60($fp)
   # #2 = #1 ADD 0
lw $t0, -60($fp)
addi $t0, $t0, 0
sw $t0, -64($fp)
   # #3 = #0 EQ #2
lw $t0, -56($fp)
lw $t1, -64($fp)
seq $t0, $t0, $t1
sw $t0, -68($fp)
   # @bz #3 main_L_18_else_begin
lw $t0, -68($fp)
beq $t0, $0, main_L_18_else_begin
nop
   # @printf STRING S_24
li $v0, 4
la $a0, S_24
syscall
   # @printf LINE
li $a0, 10
li $v0, 11
syscall
   # main_L_18_else_begin :
main_L_18_else_begin:
   # @ret 
jr $ra
nop
